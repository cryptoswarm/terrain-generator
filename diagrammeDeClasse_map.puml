@startuml

class World {
    - world
    - mode
    - width: int
    - height: int
    - soilType soil;

    + generateWorld(): void
    + addTile(x: float, y: float): void
    + addNeighbor(float x, float y, float nx, float ny): void
    - findRandomTile(): Tile
}

class Handler

class RandomContexte

Interface WorldProcessor {
    apply(world: World)
}

''' Generator '''
Interface Generator {
    generate(w: World): void
}

Class BiomeGenerator

Class RiverGenerator {
    - nbsRiverSrc: int
}

Class LakeGenerator {
    - nbsWaterSrc: int
    - random: RandomContexte
}

Class IslandGenerator {
    - width: w
    - height: h
    - islandType: String
}

BiomeGenerator .up.|> Generator
IslandGenerator .up.|> Generator
RiverGenerator .up.|> Generator
LakeGenerator .up.|> Generator



''' Island '''
Abstract Island {
    + validate(World w): void
}

class Atoll {
    - islandShape: Shape
    - lagoonShape: Shape
    - random: RandomContexte
    - smallRadius: double
    - bigRadius: double
    - center: Coordinate
    + HashMap<Coordinate, Tile> getTiles()
    - isInLagoon(tile: Tile): boolean
    - contains(tile: Tile): boolean
    - getAltitudeProfile(maxAltitude: int, tile: Tile) double
}

Class Tortuga{
    - elypse: Elypse
    - random: RandomContexte
    - spacePercentage: int
    - position: Coordinate
    - contains(tile: Tile): boolean
    - getAltitudeProfile(maxAltitude: int, tile: Tile) double
}

Atoll -up-|> Island
Tortuga -up-|> Island



''' Aquifer '''
Abstract Aquifer {
        + abstract getTiles(): HashMap<Coordinate, Tile>
        + applyHumidityEffect(world: World, waterSource: HashMap<Coordinate, Tile>): void
        - getDistanceFromWaterSource(tile: Tile, waterSource: HashMap<Coordinate, Tile>): float
}

class Lake

class Nape

Lake -up-|> Aquifer
Nape -up-|> Aquifer
River -up-|> Aquifer

''' Biome '''
Abstract Biome {
    getColor(): TileColor
    getType(): String
}

class Lagoon {
    - type: String
}

class Ocean{
    - type: String
}

class Plage{
    - type: String
}

class Vegetation{
    - type: String
}

Vegetation -up-|> Biome
Lagoon -up-|> Biome
Ocean -up-|> Biome
Plage -up-|> Biome

''' Mode '''

Abstract Mode {
    + abstract getColor(): String
    + applyFactor(c: int, factor: int): int
}

class Altitude
class Humidity
class Normal

Altitude -up-|> Mode
Humidity -up-|> Mode
Normal -up-|> Mode

Class Tile{
    - Coordinate center
    - TileColor backgroundColor
    - HashMap<Coordinate, Tile> neighbors
    - int humidityLevel
    + addNeighbor(Tile tile)
}

Enum TileColor{
    OCEANBLUE (0,64,128,255)
    WATERBLUE (0,255,255,255)
    SAND (223,159,0,255)
    LIGHTGREEN (0,255,63,255)
    DARKGREEN (0,127,63,255)
    DARKBLUE(0,0,255,255),
    BROWN(165,42,42, 255);
}

Enum soilType {
    DRY ("dry", 100),
    REGULAR ("regular",200),
    WET ("wet", 400);
}

World -- Tile
World ..> Generator
World ..> Handler
World "1" -- "1" soilType
World "1" -- "1" RandomContexte
World "1" -- "1" Mode

Biome .up.|> WorldProcessor
Island .up.|> WorldProcessor
Aquifer .up.|> WorldProcessor


BiomeGenerator ..> WorldProcessor
IslandGenerator ..> WorldProcessor
RiverGenerator ..> WorldProcessor
LakeGenerator ..> WorldProcessor

Lake "1" -- "1" TileColor
Nape "1" -- "1" TileColor
River "1" -- "2" TileColor

Plage "1" -- "1" TileColor
Ocean "1" -- "1" TileColor
Vegetation "1" -- "1" TileColor
Lagoon "1" -- "1" TileColor





@enduml